一、使用方法：
【如果没有安装python和程序依赖的第三方库，请跳转到第三大点版本号安装查看详情】
1、在脚本文件所在目录打开cmd。
2、输入命令python。
3、输入命令from detballsv import detballsv。
4、输入detballsv(r"图像所在路径", 总帧数, 相机帧率, 比例尺, 直径像素值, 判别关键帧列表, 标定模式开关, 逐帧检查开关).detect_ball()
【例子】detballsv(r"C:\Users\Desktop\1",180,200000,3/62000,(124,93),times=[4,55,25,54,-1,-1,-1,-1]).detect_ball()
5、特别注意：路径中不能出现英文！
6、报错：“关键帧xx中球x识别失败!”时不要气馁，换一帧试试。

二、图像要求：
1、对于选取的照片轮廓清晰无重影。
2、采用Kirana Control软件中菜单栏File>>>Batch Convert模式输出.jpg文件。
3、对于两球碰撞速度检测，参数times=[a,b,c,d,e,f]严格按照如下规则。
根据命令行输入的小球直径顺序，如(124,93)分别代表球1和球2，则有：
球1碰前判别关键帧的帧数起点为a，终点为b；球2碰前判别关键帧的帧数起点为c，终点为d；
球1碰后判别关键帧的帧数起点为e，终点为f；球2碰后判别关键帧的帧数起点为g，终点为h。
注意：如果没有抓拍到小球碰撞前后的关键帧，仍按以上规则命名，缺失的关键帧用-1补齐。
3、对于标定速度检测，也可用关键帧判别法计算碰前速度。将球2的直径像素值设定值为0，
times设定为[a,b,-1,-1,-1,-1,-1,-1]即可。这是因为在这种情况下，默认识别球1的碰前速度。
【例子】两种方式测定标定速度
detballsv(r"C:\Users\Desktop\scale-1",180,10000,3/62000,124,calibrating_mode=True,frame_check=False).detect_ball()
detballsv(r"C:\Users\Desktop\scale-1",180,10000,3/62000,(124,0),times=[101,109,-1,-1,-1,-1,-1,-1]).detect_ball()

三、使用说明：
1、脚本运行所需环境如下：
###      OS: Windows 7及以上    ###
###      python-version: 3.9.6     ###
###    numpy-version: 1.21.2     ###
###   opencv-python: 4.5.4.60   ###
【安装指南】python官网上下载3.9.6版本，下载时注意勾选添加到路径PATH。
之后在任意目录打开cmd依次输入：pip install numpy==1.21.2和pip install opencv-python==4.5.4.60。
2、输出计算结果的文本文档与脚本文件的路径相同。
3、可选参数calibrating_mode是标定模式开关，默认值为False；修改设置时需在命令行指定参数名。
4、可选参数frame_check是逐帧检查开关，默认值为False；修改设置时需在命令行指定参数名。
5、对于标定速度检测，本脚本设置的参数对一万帧的识别效果较好。

四、联系方式：liskello_o@outlook.com